{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\bake\\\\my-react-app\\\\src\\\\components\\\\dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport ProductService from '../services/productservices';\nimport UserManagement from '../services/users'; // Adjust path based on your actual file structure\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Dashboard() {\n  _s();\n  const [products, setProducts] = useState([]);\n  const [productData, setProductData] = useState({\n    name: '',\n    price: '',\n    description: '',\n    quantity: '',\n    category_id: '',\n    image: ''\n  });\n  const [message, setMessage] = useState('');\n  const [isAdmin, setIsAdmin] = useState(false); // State to track admin status\n  const [showCreateForm, setShowCreateForm] = useState(false); // State to toggle create form visibility\n  const [showUpdateForm, setShowUpdateForm] = useState(false); // State to toggle update form visibility\n  const [showDeleteForm, setShowDeleteForm] = useState(false); // State to toggle delete form visibility\n  const [users, setUsers] = useState([]); // State to hold users data\n  const [showUserManagement, setShowUserManagement] = useState(false); // State to toggle user management section\n\n  useEffect(() => {\n    // Simulate admin status based on some logic (e.g., hardcoded check)\n    const isAdminUser = checkAdminStatus(); // Implement your logic here\n    setIsAdmin(isAdminUser);\n    fetchProducts();\n    fetchUsers(); // Fetch users data when component mounts\n  }, []);\n  const checkAdminStatus = () => {\n    // Implement logic to determine admin status, e.g., from JWT or user roles\n    return true; // Return true for demonstration, replace with actual logic\n  };\n  const fetchProducts = async () => {\n    try {\n      const productsData = await ProductService.getAllProducts();\n      setProducts(productsData);\n    } catch (error) {\n      console.error('Error fetching products:', error);\n    }\n  };\n  const fetchUsers = async () => {\n    try {\n      // Assuming UserManagement is a component and you have a method like getAllUsers in a UserService\n      const usersData = await UserManag.getAllUsers(); // Replace with actual method from your service\n      setUsers(usersData);\n    } catch (error) {\n      console.error('Error fetching users:', error);\n    }\n  };\n\n  // Other functions and JSX remains the same as previously discussed\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n_s(Dashboard, \"WtywG5WgNNTQPsVObpvamaU6R0A=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","ProductService","UserManagement","jsxDEV","_jsxDEV","Dashboard","_s","products","setProducts","productData","setProductData","name","price","description","quantity","category_id","image","message","setMessage","isAdmin","setIsAdmin","showCreateForm","setShowCreateForm","showUpdateForm","setShowUpdateForm","showDeleteForm","setShowDeleteForm","users","setUsers","showUserManagement","setShowUserManagement","isAdminUser","checkAdminStatus","fetchProducts","fetchUsers","productsData","getAllProducts","error","console","usersData","UserManag","getAllUsers","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Administrator/Desktop/bake/my-react-app/src/components/dashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport ProductService from '../services/productservices';\r\nimport UserManagement from '../services/users'; // Adjust path based on your actual file structure\r\n\r\nfunction Dashboard() {\r\n  const [products, setProducts] = useState([]);\r\n  const [productData, setProductData] = useState({\r\n    name: '',\r\n    price: '',\r\n    description: '',\r\n    quantity: '',\r\n    category_id: '',\r\n    image: ''\r\n  });\r\n  const [message, setMessage] = useState('');\r\n  const [isAdmin, setIsAdmin] = useState(false); // State to track admin status\r\n  const [showCreateForm, setShowCreateForm] = useState(false); // State to toggle create form visibility\r\n  const [showUpdateForm, setShowUpdateForm] = useState(false); // State to toggle update form visibility\r\n  const [showDeleteForm, setShowDeleteForm] = useState(false); // State to toggle delete form visibility\r\n  const [users, setUsers] = useState([]); // State to hold users data\r\n  const [showUserManagement, setShowUserManagement] = useState(false); // State to toggle user management section\r\n\r\n  useEffect(() => {\r\n    // Simulate admin status based on some logic (e.g., hardcoded check)\r\n    const isAdminUser = checkAdminStatus(); // Implement your logic here\r\n    setIsAdmin(isAdminUser);\r\n    fetchProducts();\r\n    fetchUsers(); // Fetch users data when component mounts\r\n  }, []);\r\n\r\n  const checkAdminStatus = () => {\r\n    // Implement logic to determine admin status, e.g., from JWT or user roles\r\n    return true; // Return true for demonstration, replace with actual logic\r\n  };\r\n\r\n  const fetchProducts = async () => {\r\n    try {\r\n      const productsData = await ProductService.getAllProducts();\r\n      setProducts(productsData);\r\n    } catch (error) {\r\n      console.error('Error fetching products:', error);\r\n    }\r\n  };\r\n\r\n  const fetchUsers = async () => {\r\n    try {\r\n      // Assuming UserManagement is a component and you have a method like getAllUsers in a UserService\r\n      const usersData = await UserManag.getAllUsers(); // Replace with actual method from your service\r\n      setUsers(usersData);\r\n    } catch (error) {\r\n      console.error('Error fetching users:', error);\r\n    }\r\n  };\r\n\r\n  // Other functions and JSX remains the same as previously discussed\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      {/* Rest of your JSX code */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Dashboard;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,cAAc,MAAM,6BAA6B;AACxD,OAAOC,cAAc,MAAM,mBAAmB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEhD,SAASC,SAASA,CAAA,EAAG;EAAAC,EAAA;EACnB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACU,WAAW,EAAEC,cAAc,CAAC,GAAGX,QAAQ,CAAC;IAC7CY,IAAI,EAAE,EAAE;IACRC,KAAK,EAAE,EAAE;IACTC,WAAW,EAAE,EAAE;IACfC,QAAQ,EAAE,EAAE;IACZC,WAAW,EAAE,EAAE;IACfC,KAAK,EAAE;EACT,CAAC,CAAC;EACF,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACoB,OAAO,EAAEC,UAAU,CAAC,GAAGrB,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;EAC/C,MAAM,CAACsB,cAAc,EAAEC,iBAAiB,CAAC,GAAGvB,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;EAC7D,MAAM,CAACwB,cAAc,EAAEC,iBAAiB,CAAC,GAAGzB,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;EAC7D,MAAM,CAAC0B,cAAc,EAAEC,iBAAiB,CAAC,GAAG3B,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;EAC7D,MAAM,CAAC4B,KAAK,EAAEC,QAAQ,CAAC,GAAG7B,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EACxC,MAAM,CAAC8B,kBAAkB,EAAEC,qBAAqB,CAAC,GAAG/B,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;;EAErEC,SAAS,CAAC,MAAM;IACd;IACA,MAAM+B,WAAW,GAAGC,gBAAgB,CAAC,CAAC,CAAC,CAAC;IACxCZ,UAAU,CAACW,WAAW,CAAC;IACvBE,aAAa,CAAC,CAAC;IACfC,UAAU,CAAC,CAAC,CAAC,CAAC;EAChB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMF,gBAAgB,GAAGA,CAAA,KAAM;IAC7B;IACA,OAAO,IAAI,CAAC,CAAC;EACf,CAAC;EAED,MAAMC,aAAa,GAAG,MAAAA,CAAA,KAAY;IAChC,IAAI;MACF,MAAME,YAAY,GAAG,MAAMlC,cAAc,CAACmC,cAAc,CAAC,CAAC;MAC1D5B,WAAW,CAAC2B,YAAY,CAAC;IAC3B,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAClD;EACF,CAAC;EAED,MAAMH,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC7B,IAAI;MACF;MACA,MAAMK,SAAS,GAAG,MAAMC,SAAS,CAACC,WAAW,CAAC,CAAC,CAAC,CAAC;MACjDb,QAAQ,CAACW,SAAS,CAAC;IACrB,CAAC,CAAC,OAAOF,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC/C;EACF,CAAC;;EAED;;EAEA,oBACEjC,OAAA;IAAKsC,SAAS,EAAC;EAAW;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAErB,CAAC;AAEV;AAACxC,EAAA,CAzDQD,SAAS;AAAA0C,EAAA,GAAT1C,SAAS;AA2DlB,eAAeA,SAAS;AAAC,IAAA0C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}