{"ast":null,"code":"// JavaScript frontend code\n\n// Function to create a new order\nfunction OrderOnline() {\n  const data = {\n    customer_id: 1,\n    // Replace with actual customer ID\n    product_id: 2,\n    // Replace with actual product ID\n    user_id: 3,\n    // Replace with actual user ID\n    status: 'pending',\n    // Replace with actual status\n    quantity: 1,\n    total_price: 100,\n    // Replace with actual total price\n    special_instructions: 'Handle with care'\n  };\n  fetch('/api/v1/orders/create', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  }).then(response => {\n    if (!response.ok) {\n      throw new Error('Failed to create order');\n    }\n    return response.json();\n  }).then(data => {\n    console.log('Order created successfully:', data);\n    // Handle success, e.g., show a success message to the user\n  }).catch(error => {\n    console.error('Error creating order:', error);\n    // Handle error, e.g., show an error message to the user\n  });\n}\n\n// Function to fetch an order by ID\n_c = OrderOnline;\nfunction getOrderById(orderId) {\n  fetch(`/api/v1/orders/${orderId}`).then(response => {\n    if (!response.ok) {\n      throw new Error('Failed to fetch order');\n    }\n    return response.json();\n  }).then(data => {\n    console.log('Order details:', data);\n    // Handle displaying order details on the frontend\n  }).catch(error => {\n    console.error('Error fetching order:', error);\n    // Handle error, e.g., show an error message to the user\n  });\n}\n\n// Function to update an existing order by ID\nfunction updateOrder(orderId) {\n  const data = {\n    customer_id: 1,\n    // Replace with actual customer ID\n    product_id: 2,\n    // Replace with actual product ID\n    user_id: 3,\n    // Replace with actual user ID\n    status: 'shipped',\n    // Replace with actual status\n    quantity: 2,\n    total_price: 150,\n    // Replace with actual total price\n    special_instructions: 'Fragile, handle with care'\n  };\n  fetch(`/api/v1/orders/${orderId}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  }).then(response => {\n    if (!response.ok) {\n      throw new Error('Failed to update order');\n    }\n    return response.json();\n  }).then(data => {\n    console.log('Order updated successfully:', data);\n    // Handle success, e.g., update order details on the frontend\n  }).catch(error => {\n    console.error('Error updating order:', error);\n    // Handle error, e.g., show an error message to the user\n  });\n}\n\n// Function to delete an order by ID\nfunction deleteOrder(orderId) {\n  fetch(`/api/v1/orders/${orderId}`, {\n    method: 'DELETE'\n  }).then(response => {\n    if (!response.ok) {\n      throw new Error('Failed to delete order');\n    }\n    return response.json();\n  }).then(data => {\n    console.log('Order deleted successfully:', data);\n    // Handle success, e.g., update UI to reflect order deletion\n  }).catch(error => {\n    console.error('Error deleting order:', error);\n    // Handle error, e.g., show an error message to the user\n  });\n}\ne;\nvar _c;\n$RefreshReg$(_c, \"OrderOnline\");","map":{"version":3,"names":["OrderOnline","data","customer_id","product_id","user_id","status","quantity","total_price","special_instructions","fetch","method","headers","body","JSON","stringify","then","response","ok","Error","json","console","log","catch","error","_c","getOrderById","orderId","updateOrder","deleteOrder","e","$RefreshReg$"],"sources":["C:/Users/Administrator/Desktop/bake/my-react-app/src/components/orders.js"],"sourcesContent":["// JavaScript frontend code\r\n\r\n// Function to create a new order\r\nfunction OrderOnline() {\r\n  const data = {\r\n      customer_id: 1,  // Replace with actual customer ID\r\n      product_id: 2,   // Replace with actual product ID\r\n      user_id: 3,      // Replace with actual user ID\r\n      status: 'pending',  // Replace with actual status\r\n      quantity: 1,\r\n      total_price: 100,  // Replace with actual total price\r\n      special_instructions: 'Handle with care'\r\n  };\r\n\r\n  fetch('/api/v1/orders/create', {\r\n      method: 'POST',\r\n      headers: {\r\n          'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(data),\r\n  })\r\n  .then(response => {\r\n      if (!response.ok) {\r\n          throw new Error('Failed to create order');\r\n      }\r\n      return response.json();\r\n  })\r\n  .then(data => {\r\n      console.log('Order created successfully:', data);\r\n      // Handle success, e.g., show a success message to the user\r\n  })\r\n  .catch(error => {\r\n      console.error('Error creating order:', error);\r\n      // Handle error, e.g., show an error message to the user\r\n  });\r\n}\r\n\r\n// Function to fetch an order by ID\r\nfunction getOrderById(orderId) {\r\n  fetch(`/api/v1/orders/${orderId}`)\r\n  .then(response => {\r\n      if (!response.ok) {\r\n          throw new Error('Failed to fetch order');\r\n      }\r\n      return response.json();\r\n  })\r\n  .then(data => {\r\n      console.log('Order details:', data);\r\n      // Handle displaying order details on the frontend\r\n  })\r\n  .catch(error => {\r\n      console.error('Error fetching order:', error);\r\n      // Handle error, e.g., show an error message to the user\r\n  });\r\n}\r\n\r\n// Function to update an existing order by ID\r\nfunction updateOrder(orderId) {\r\n  const data = {\r\n      customer_id: 1,  // Replace with actual customer ID\r\n      product_id: 2,   // Replace with actual product ID\r\n      user_id: 3,      // Replace with actual user ID\r\n      status: 'shipped',  // Replace with actual status\r\n      quantity: 2,\r\n      total_price: 150,  // Replace with actual total price\r\n      special_instructions: 'Fragile, handle with care'\r\n  };\r\n\r\n  fetch(`/api/v1/orders/${orderId}`, {\r\n      method: 'PUT',\r\n      headers: {\r\n          'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(data),\r\n  })\r\n  .then(response => {\r\n      if (!response.ok) {\r\n          throw new Error('Failed to update order');\r\n      }\r\n      return response.json();\r\n  })\r\n  .then(data => {\r\n      console.log('Order updated successfully:', data);\r\n      // Handle success, e.g., update order details on the frontend\r\n  })\r\n  .catch(error => {\r\n      console.error('Error updating order:', error);\r\n      // Handle error, e.g., show an error message to the user\r\n  });\r\n}\r\n\r\n// Function to delete an order by ID\r\nfunction deleteOrder(orderId) {\r\n  fetch(`/api/v1/orders/${orderId}`, {\r\n      method: 'DELETE',\r\n  })\r\n  .then(response => {\r\n      if (!response.ok) {\r\n          throw new Error('Failed to delete order');\r\n      }\r\n      return response.json();\r\n  })\r\n  .then(data => {\r\n      console.log('Order deleted successfully:', data);\r\n      // Handle success, e.g., update UI to reflect order deletion\r\n  })\r\n  .catch(error => {\r\n      console.error('Error deleting order:', error);\r\n      // Handle error, e.g., show an error message to the user\r\n  });\r\n}\r\n\r\n\r\ne\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}