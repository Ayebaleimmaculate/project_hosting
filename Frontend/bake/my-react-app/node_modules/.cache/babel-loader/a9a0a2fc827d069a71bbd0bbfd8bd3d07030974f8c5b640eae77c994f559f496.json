{"ast":null,"code":"// Function to validate the form fields\nfunction validateForm() {\n  // Get form elements\n  const fullName = document.getElementById('fullName').value.trim();\n  const email = document.getElementById('email').value.trim();\n  const phone = document.getElementById('phone').value.trim();\n  const pickupLocation = document.getElementById('pickupLocation').value.trim();\n  const deliveryAddress = document.getElementById('deliveryAddress').value.trim();\n  const pickupDate = document.getElementById('pickupDate').value.trim();\n  const pickupTime = document.getElementById('pickupTime').value.trim();\n\n  // Perform basic validation (you can add more specific checks)\n  if (fullName === '' || email === '' || phone === '' || pickupLocation === '' && deliveryAddress === '' || pickupDate === '' || pickupTime === '') {\n    alert('Please fill in all required fields.');\n    return false;\n  }\n\n  // Additional validation logic as needed\n\n  return true;\n}\n\n// Function to submit the form\nfunction submitForm(event) {\n  event.preventDefault(); // Prevent default form submission\n\n  // Validate the form\n  if (!validateForm()) {\n    return;\n  }\n\n  // Prepare form data\n  const formData = new FormData(document.getElementById('orderForm'));\n  const data = {\n    customer_id: parseInt(formData.get('customer_id')),\n    // Assuming customer_id is an integer\n    product_id: parseInt(formData.get('product_id')),\n    // Assuming product_id is an integer\n    user_id: parseInt(formData.get('user_id')),\n    // Assuming user_id is an integer\n    status: formData.get('status'),\n    quantity: parseInt(formData.get('quantity')),\n    // Assuming quantity is an integer\n    total_price: parseFloat(formData.get('total_price')),\n    // Assuming total_price is a float\n    special_instructions: formData.get('special_instructions')\n  };\n\n  // Send data to Flask API endpoint\n  fetch('/api/v1/orders/create', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  }).then(response => {\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    return response.json();\n  }).then(data => {\n    // Handle success response (optional)\n    console.log('Success:', data);\n    alert('Order submitted successfully!');\n    document.getElementById('orderForm').reset(); // Reset the form\n  }).catch(error => {\n    // Handle error\n    console.error('Error:', error);\n    alert('There was an error submitting your order. Please try again later.');\n  });\n}\n\n// Add event listener for form submission\ndocument.getElementById('orderForm').addEventListener('submit', submitForm);\nexport default O;","map":{"version":3,"names":["validateForm","fullName","document","getElementById","value","trim","email","phone","pickupLocation","deliveryAddress","pickupDate","pickupTime","alert","submitForm","event","preventDefault","formData","FormData","data","customer_id","parseInt","get","product_id","user_id","status","quantity","total_price","parseFloat","special_instructions","fetch","method","headers","body","JSON","stringify","then","response","ok","Error","json","console","log","reset","catch","error","addEventListener","O"],"sources":["C:/Users/Administrator/Desktop/bake/my-react-app/src/components/orders.js"],"sourcesContent":["// Function to validate the form fields\r\nfunction validateForm() {\r\n  // Get form elements\r\n  const fullName = document.getElementById('fullName').value.trim();\r\n  const email = document.getElementById('email').value.trim();\r\n  const phone = document.getElementById('phone').value.trim();\r\n  const pickupLocation = document.getElementById('pickupLocation').value.trim();\r\n  const deliveryAddress = document.getElementById('deliveryAddress').value.trim();\r\n  const pickupDate = document.getElementById('pickupDate').value.trim();\r\n  const pickupTime = document.getElementById('pickupTime').value.trim();\r\n  \r\n  // Perform basic validation (you can add more specific checks)\r\n  if (fullName === '' || email === '' || phone === '' || (pickupLocation === '' && deliveryAddress === '') || pickupDate === '' || pickupTime === '') {\r\n      alert('Please fill in all required fields.');\r\n      return false;\r\n  }\r\n\r\n  // Additional validation logic as needed\r\n\r\n  return true;\r\n}\r\n\r\n// Function to submit the form\r\nfunction submitForm(event) {\r\n  event.preventDefault(); // Prevent default form submission\r\n\r\n  // Validate the form\r\n  if (!validateForm()) {\r\n      return;\r\n  }\r\n\r\n  // Prepare form data\r\n  const formData = new FormData(document.getElementById('orderForm'));\r\n  const data = {\r\n      customer_id: parseInt(formData.get('customer_id')), // Assuming customer_id is an integer\r\n      product_id: parseInt(formData.get('product_id')), // Assuming product_id is an integer\r\n      user_id: parseInt(formData.get('user_id')), // Assuming user_id is an integer\r\n      status: formData.get('status'),\r\n      quantity: parseInt(formData.get('quantity')), // Assuming quantity is an integer\r\n      total_price: parseFloat(formData.get('total_price')), // Assuming total_price is a float\r\n      special_instructions: formData.get('special_instructions')\r\n  };\r\n\r\n  // Send data to Flask API endpoint\r\n  fetch('/api/v1/orders/create', {\r\n      method: 'POST',\r\n      headers: {\r\n          'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(data),\r\n  })\r\n  .then(response => {\r\n      if (!response.ok) {\r\n          throw new Error('Network response was not ok');\r\n      }\r\n      return response.json();\r\n  })\r\n  .then(data => {\r\n      // Handle success response (optional)\r\n      console.log('Success:', data);\r\n      alert('Order submitted successfully!');\r\n      document.getElementById('orderForm').reset(); // Reset the form\r\n  })\r\n  .catch(error => {\r\n      // Handle error\r\n      console.error('Error:', error);\r\n      alert('There was an error submitting your order. Please try again later.');\r\n  });\r\n}\r\n\r\n// Add event listener for form submission\r\ndocument.getElementById('orderForm').addEventListener('submit', submitForm);\r\n\r\nexport default O\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}